# This workflow runs all dockerfiles in this repo

name: CI

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  matrix_prep:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      
    steps:
    # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - id: set-matrix
        name: Prepare matrix from Dockerfiles in Repo
        run: | 
          matrix=$(find . -type f -name "Dockerfile" -printf "{\"folder\":\"%h\"}," | sed -e 's/,$//')         
          echo "Matrix: $matrix"
          echo ::set-output name=matrix::{\"include\":[$(echo $matrix)]}

  docker_run:
    needs: matrix_prep
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{fromJson(needs.matrix_prep.outputs.matrix)}}
      
    defaults:
      run:
        working-directory: ${{ matrix.folder }}
        
    steps:
      - uses: actions/checkout@v2
                
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            folder:
              - '${{matrix.folder}}/**'  
        
      - id: tag
        name: Create tag for Docker
        if: steps.changes.outputs.folder == 'true'
        run: echo ::set-output name=tag::$(basename $(pwd))
        
      - id: build-image
        name: Build Image from Dockerfile
        if: steps.changes.outputs.folder == 'true'
        run: docker build . --tag ${{ steps.tag.outputs.tag }}
        
      - id: run-image  
        name: Run Image
        if: steps.changes.outputs.folder == 'true'
        run: docker run ${{ steps.tag.outputs.tag }}
        
      - id: retrive-logs
        name: Retrive Logs from executed Image
        if: steps.changes.outputs.folder == 'true'
        run: echo ::set-output name=log::$(docker logs $(docker ps --all -l --format "{{.ID}}"))
        
      - id: compare-output
        name: Check if Output matches 'Hello World!'
        if: steps.changes.outputs.folder == 'true'
        run: |
          [[ ${{ steps.retrive-logs.outputs.log }} == "Hello World!" ]] && echo "Output matches 'Hello World!'." || echo "Output does not match 'Hello World!'.\nOutput is: ${{ steps.retrive-logs.outputs.log }}" && exit 1
